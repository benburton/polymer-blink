{
  "name": "karma-polymer-test",
  "title": "Karma Polymer Test",
  "description": "A karma plugin that allows easy unit testing of a Polymer component",
  "version": "0.2.1",
  "homepage": "https://dev.vcatechnology.com/gitlab/web/karma-polymer-test",
  "author": {
    "name": "VCA Technology",
    "email": "info@vcatechnology.com"
  },
  "maintainers": [
    {
      "name": "Matt Clarkson",
      "email": "matt.clarkson@vcatechnology.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://dev.vcatechnology.com/gitlab/web/karma-polymer-test.git"
  },
  "bugs": {
    "url": "https://dev.vcatechnology.com/gitlab/web/karma-polymer-test/issues"
  },
  "keywords": [
    "karma-plugin",
    "karma-framework",
    "polymer",
    "unit-testing",
    "tdd"
  ],
  "license": "BSD-3-Clause",
  "licenses": [
    {
      "type": "BSD-3-Clause",
      "url": "https://dev.vcatechnology.com/gitlab/web/karma-polymer-test/blob/master/LICENSE"
    }
  ],
  "readmeFilename": "README.md",
  "main": "index.js",
  "peerDependencies": {
    "karma-chai": "*",
    "karma-mocha": "*",
    "karma-detect-browsers": "*"
  },
  "devDependencies": {
    "bower": "*",
    "grunt": "*",
    "grunt-release": "*",
    "grunt-contrib-jshint": "*",
    "grunt-contrib-yuidoc": "*",
    "yuidoc-bootstrap-theme": "*"
  },
  "contributors": [
    {
      "name": "VCA Technology",
      "email": "info@vcatechnology.com"
    }
  ],
  "readme": "# karma-polymer-test\n\n> A karma plugin that allows easy unit testing of a Polymer component.\n\n## Features\n\n * Automatically loads necessary Karma frameworks for testing Polymer components\n * Built in bootstrap for loading the Polymer element via the `elementSuite` Mocha extension\n * Can load boilerplate HTML files for use in the testing\n * Sets up proxies to the correct locations of the Polymer bower components\n\n## Installation\n\nThe easiest way is to keep `karma-polymer-test` as a devDependency in you `package.json`.\n\n```json\n{\n  \"devDependencies\": {\n    \"karma-polymer-test\": \"~0.1\"\n  }\n}\n```\n\nYou can simple do it by:\n```bash\nnpm install karma-polymer-test --save-dev\n```\n\n## Configuration\n```js\n// karma.conf.js\nmodule.exports = function(config) {\n  config.set({\n    frameworks: ['polymerTest'],\n\n    // configuration\n    polymerTest: {\n    }\n  });\n};\n```\n\n## Getting Started\n\nThe `karma-polymer-test` component allows a very simple method to test Polymer components. It uses the [Mocha](http://visionmedia.github.io/mocha/) test framework coupled with [chai](http://chaijs.com/) as the assertion library. This allows the tests to run in the browser but also be hosted by the [grunt karma plugin](https://www.npmjs.org/package/grunt-karma).\n\nTo get going, add some tests create the `test/attributes.js` file in the root of the repository:\n\n```javascript\n/* global elementSuite, test, assert */\n(function() {\n  'user strict';\n  // Specify that we are running tests for the `vca-colour-picker` element\n  elementSuite('vca-colour-picker', function() {\n    test('setting the RGB values should change the web value', function(done) {\n      // The karma-polymer-test adds some extra function calls to Mocha to work\n      // around the timing issues of setting Polymer attributes. Set the attributes in\n      // the `this.set` callback then check them in the `this.then` callback\n      this.set(function(element) {\n        element.r = 128;\n        element.g = 48;\n        element.b = 196;\n      }).then(function(element) {\n        assert.equal(element.web, '#8030c4');\n      });\n    });\n  });\n}());\n```\n\n[Karma](http://karma-runner.github.io/0.12/index.html) is a testing runner that has a plugin for grunt. Karma allows the tests to be run from the command line on multiple browsers.\n\nFirst add the following to your `package.json`:\n\n```json\n{\n  \"devDependencies\": {\n    \"karma\": \"*\",\n    \"karma-polymer-test\": \"*\"\n  }\n}\n```\n\nThis will allow automatic testing on the browsers available on the system. You'll want the `karma-cli` globally:\n\n```bash\nnpm install -g karma-cli\n```\n\nNow you'll need a configuration file to tell Karma what to load and test. The following configuration file works well, but may need tweaks. Save it as `karma.js` in the root of the repository:\n\n```javascript\nmodule.exports = function(config) {\n  'use strict';\n  // Set up karma\n  config.set({\n    frameworks: ['polymerTest'],\n    files: ['test/*.js']\n  });\n};\n```\n\nTests can now be run in the Karma server. The Karma server watches the files for any changes and re-runs the tests when they are modified which is really useful for fast iterations:\n\n```bash\nkarma start karma.js\n```\n\nThe final step is to hook up Karma to grunt so the tests can be run in a continuous integration server. Make sure you have the necessary plugins in your `package.json`:\n\n```json\n{\n  \"devDependencies\": {\n    \"grunt-bower-install-simple\": \"*\",\n    \"grunt-karma\": \"*\"\n  }\n}\n```\n\nThen add the following to the `gruntfile.js` to add the tests to the build step:\n\n```javascript\nmodule.exports = function(grunt) {\n  'use strict';\n  // Project Configuration\n  grunt.initConfig({\n    // Metadata\n    bower: grunt.file.exists('.bowerrc') && grunt.file.readJSON('.bowerrc') || {directory:'bower_components'},\n\n    // Task configuration\n    'bower-install-simple': {\n      options: {\n        forceLatest: true,\n        color: true,\n        production: false,\n        directory: '<%= bower.directory %>'\n      }\n    },\n    karma: {\n      config: {\n        configFile: 'karma.conf.js',\n        autoWatch: false,\n        singleRun: true\n      }\n    },\n  });\n\n  // Plugins\n  grunt.loadNpmTasks('grunt-karma');\n  grunt.loadNpmTasks('grunt-bower-install-simple');\n\n  // Some aliases\n  grunt.registerTask('bower-install', [ 'bower-install-simple' ]);\n\n  // Task registration\n  grunt.registerTask('test', ['bower-install', 'karma:config']);\n};\n```\n\nRunning `grunt test` will now run the tests automatically as part of the build process.\n\n## Boilerplate HTML\n\nPolymer elements have the capability of have children nodes injected using the `<content>` tag. To be able to test this\ncapability a boilerplate piece of HTML needs to be inserted into the testing iframe. To use this feature of\nkarma-polymer-test add the serving of HTML boilerplate files to the `karma.conf.js`:\n\n```javascript\nmodule.exports = function(config) {\n  'use strict';\n  // Set up karma\n  config.set({\n    frameworks: ['polymerTest'],\n    files: [\n      'test/*.js',\n      // We need this to allow the HTML boilerplate files to be loaded via\n      // elementSuite, Karma will now serve the files\n      {pattern:'test/*.html', included: false, watched: true, served: true}\n    ]\n  });\n};\n```\n\nAdd a second parameter to the `elementSuite` test case with the name of the HTML boilerplate file to load:\n\n```javascript\n/* global elementSuite, suite, test, assert */\n(function() {\n  'use strict';\n  elementSuite('my-element', 'my-boilerplate', function() {\n// The HTML file name to load ^^^^^^^^^^^^^^\n  });\n)());\n```\n\nNow it is possible to create a boilerplate file called `test/my-boilerplate.html` that will be used for each test in\nthe `elementSuite` tests:\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <title>VCA Element Test</title>\n    <meta charset=\"UTF-8\">\n\n    <!-- Make sure the platform polyfill is loaded -->\n    <script src=\"/bower_components/platform/platform.js\"></script>\n  </head>\n  <body>\n    <my-element>\n      <p>This is <content></p>\n    </my-element>\n  </body>\n</html>\n```\n\nThe karma-polyer-test framework proxies the bower components directory to `/bower_components` even if the `.bowerrc`\nsets the folder to another location locally. It is then easy to load dependent elements for testing.\n\n",
  "_id": "karma-polymer-test@0.2.1",
  "_shasum": "1119bf21784bf3e8800458021bd2b886afdf0fa6",
  "_from": "karma-polymer-test@",
  "_resolved": "https://registry.npmjs.org/karma-polymer-test/-/karma-polymer-test-0.2.1.tgz"
}
