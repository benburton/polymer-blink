/**
 * Finds the bower run commands object which is useful for determining the bower components directory
 * @param {String} basePath the path to start searching for the bower components
 * @return {Object}
 * @method bowerRunCommands
 */
var bowerRunCommands = function(basePath) {
  var fs = require('fs'),
      bower = fs.existsSync(basePath +'/.bowerrc') && JSON.parse(fs.readFileSync(basePath +'/.bowerrc'));
  return bower || {directory:'bower_components'};
},

/**
 * Creates a Karma file pattern
 * @param {String} path the path glob description
 * @param {Boolean} [included=false] determines if the file should be included in the served Karma page
 * @param {Boolean} [watched=false] determines if the file should be watched for changes to restart the tests
 * @return {Object} the file pattern
 * @method createPattern
 */
createPattern = function(path, included, watched) {
  'use strict';
  return {pattern: path, included: !!included, served: true, watched: !!watched};
},

/**
 * Creates a Karma proxy path
 * @param {String} path the path that should be proxied
 * @param {Object} config the path that should be proxied
 * @param {String} [proxy] the proxy location
 * @return {String} the proxy path
 * @method createProxy
 */
createProxy = function(path, config, proxy) {
  'use strict';
  var proxy = proxy || path.substr(path.lastIndexOf('/')),
      path = 'http://' + config.hostname + ':' + config.port + '/base' + path.replace(config.basePath, '');
  config.proxies = config.proxies || {};
  config.proxies[proxy] = path;
},

/**
 * Injects data into the Karma configuration
 * @param {Object} config the configuration object
 * @param {Object} logger the Karma logging object
 * @method initPolymerTest
 */
initPolymerTest = function (injector, config, logger, webServer) {
  'use strict';
  var path = require('path'),
      bowerDir = config.basePath + '/' + bowerRunCommands(config.basePath).directory,
      log = logger.create('framework.polymerTest'),
      frameworks = ['detectBrowsers', 'mocha', 'chai'];

  // Make sure the configuration is an object
  config = config || {};

  // Inject the needed files
  config.files = config.files || [];
  config.files.unshift(createPattern(config.basePath + '/*.html', false, true));
  config.files.unshift(createPattern(__dirname + '/elementSuite.js', true));
  config.files.unshift(createPattern(__dirname + '/iframe.html'));
  config.files.unshift(createPattern(bowerDir + '/**/*.html'));
  config.files.unshift(createPattern(bowerDir + '/**/*.js'));
  config.files.unshift(createPattern(bowerDir + '/**/*.js.map'));
  config.files.unshift(createPattern(bowerDir + '/platform/platform.js', true));

  // Proxy our stuff to a nice URL
  createProxy(bowerDir, config);
  createProxy(__dirname, config, path.join('/bower_components', path.basename(__dirname)));

  // We don't want PhantomJS
  config.detectBrowsers = config.detectBrowsers || {};
  if (!config.detectBrowsers.usePhantomJS !== false) {
    config.detectBrowsers.usePhantomJS = false;
  }

  // Run the dependent frameworks
  frameworks.forEach(function(framework) {
    if (!(framework in config.frameworks)) {
      log.debug('polymerTest failed to find the \'' + framework + '\' framework - getting from injector');
      injector.get('framework:' + framework);
    }
  });
};

// PUBLISH DI MODULE
module.exports = {
  'framework:polymerTest': ['factory', initPolymerTest]
};

// TODO(matt.clarkson): Currently the proxies are created when the web server starts using proxy middleware
// https://github.com/karma-runner/karma/blob/3873c5311932176a08e774f3efe1c21ee74064c0/lib/server.js#L288
// https://github.com/karma-runner/karma/blob/3873c5311932176a08e774f3efe1c21ee74064c0/lib/web-server.js#L46
// https://github.com/karma-runner/karma/blob/3873c5311932176a08e774f3efe1c21ee74064c0/lib/web-server.js#L53
// https://github.com/karma-runner/karma/blob/3873c5311932176a08e774f3efe1c21ee74064c0/lib/middleware/proxy.js#L126
// https://github.com/karma-runner/karma/issues/1110
// HACK: there is no way to hook into the proxies once the web server is running so...monkey patch the injector
// constructor so we can patch the invoke function to put our two proxies in. Urgh, feel all dirty. Hopefully the issue
// will be fixed and we can get rid of this!
var di = require('karma/node_modules/di'),
    Injector = di.Injector;
di.Injector = function(args) {
  var construct = function(constructor, args) {
        function F() {
          return constructor.apply(this, args);
        }
        F.prototype = constructor.prototype;
        return new F();
      },
      injector = construct(Injector, arguments),
      invoke = injector.invoke;
  injector.invoke = function(args) {
    var patchProxies = function(config) {
      var path = require('path'),
          bowerDir = config.basePath + '/' + bowerRunCommands(config.basePath).directory;
      createProxy(bowerDir, config);
      createProxy(__dirname, config, path.join('/bower_components', path.basename(__dirname)));
      injector.invoke = invoke;
    };
    invoke(patchProxies);
    return invoke.apply(this, arguments);
  }
  return injector;
};
