/* global chai, mocha, setup, teardown, suite, Platform */
(function() {
  /* jshint validthis:true */
  'use strict';
  /**
   * The current testing iframe that contains the Polymer element
   * @property iframe
   * @type Element
   * @static
   * @private
   */
  var iframe;

  /**
   * Imports the element into the document so that the relative bower component imports resolve
   * @param {XMLHttpRequest} xhr the request the retrieve the element to test
   * @param {String} name the name of the element that is to be tested
   * @param {Function} done the Mocha callback function so signify that the test `setup` has completed
   * @method elementImport
   * @private
   */
  function elementImport(xhr, name, done) {
    if (xhr.status === 200) {
      var component = xhr.response,
          doc = iframe.contentDocument,
          link = doc.createElement('link');

    // Do a local import
    link.rel = 'import';
    link.href = 'data:text/html,' + encodeURIComponent(component);

    // Monkey patch Polymer, to fake the location of the 'import': http://stackoverflow.com/q/24383205/192993
    if (iframe.contentWindow.HTMLImports && !iframe.contentWindow.HTMLImports.useNative) {
      var hi = iframe.contentWindow.HTMLImports,
          importLoader = hi.importLoader,
          receive = importLoader.receive,
          origin = location.origin;
      importLoader.receive = function(args) {
        if (arguments[0] === link.href) {
          var i, redirected = [];
          for (i = 0; i < arguments.length; ++i) {
            redirected.push(arguments[i]);
          }
          redirected.push(origin + '/bower_components/' + name + '/' + name + '.html');
          receive.apply(this, redirected);
        } else {
          receive.apply(this, arguments);
        }
      };
    }

    // Add the link now that we are monkey patched
    doc.head.appendChild(link);

      // Make sure polymer is fired up
      doc.addEventListener('polymer-ready', function() {
        // Attempt to find the element
        var element = doc.querySelector(name);
        if (!element) {
          element = doc.createElement(name);
          doc.body.appendChild(element);
        }
        // Create the element
        this.ctx.element = element;

        // Tell mocha that we are done
        done();
      }.bind(this, xhr.response), false);
    } else {
      throw new Error('Failed to load the component \'' + name + '\': ' + xhr.status + ': ' + xhr.response);
    }
  }

  /**
   * Loads the element to be tested into the `iframe`
   * @param {String} name the name of the element that is to be tested
   * @param {Function} done the Mocha callback function so signify that the test `setup` has completed
   * @method elementLoad
   * @private
   */
  function elementLoad(name, done) {
    var xhr = new XMLHttpRequest(),
        path = '/base/' + name + '.html',
        doc = iframe.contentDocument,
        platform = doc.head.querySelector('script[src*="platform.js"]');

    // Make sure the platform polyfill is added to the head
    console.log('platform', platform);
    if (!platform) {
      throw new Error('The boilerplate HTML did not contain the platform polyfill. Add ' +
        '\'<script src="/bower_components/platform/platform.js"></script>\' to the head of the \'' +
        iframe.src.substr(iframe.src.indexOf('/base') + 6) + '\'');
    }

    // Load in the component
    xhr.open('GET', path, true);
    xhr.onload = elementImport.bind(this, xhr, name, done);
    xhr.send();
  }

  /**
   * Sets up the Mocha test case before the test is ran. Adds the `element` attribute to the test context the provides
   * a reference to the element that is being tested in the offscreen `iframe`. Two convenience functions are added;
   * `set` and `then`:
   *
   *     (function() {
   *       'user strict';
   *       elementSuite('vca-colour-picker', function() {
   *         test('setting the web value should be reflected in the RGB values', function(done) {
   *           this.set(function(element) {
   *             element.web = '#FFCC88';
   *           }).then(function(element) {
   *             assert.equal(element.r, 255);
   *             assert.equal(element.g, 204);
   *             assert.equal(element.b, 136);
   *           });
   *         });
   *       });
   *     }());
   *
   * @param {String} name the name of the element that is to be tested
   * @param {Path} boilerplate the path of the file that should be loaded into the iframe
   * @param {Function} done the Mocha callback function so signify that the test `setup` has completed
   * @method elementSetup
   * @private
   */
  function elementSetup(name, boilerplate, done) {
    iframe = document.createElement('iframe');
    iframe.style.cssText = 'position: absolute;left:-10000em;width:768px;height:1024px';
    iframe.onload = elementLoad.bind(this, name, done);
    iframe.src = boilerplate;
    document.body.appendChild(iframe);

    // Provide convience functions
    this.ctx.set = function(callback) {
      callback.call(this, this.element);
      Platform.flush();
      return this;
    };
    this.ctx.then = function(callback) {
      setTimeout(function() {
        callback.call(this, this.element);
        this.test.callback();
      }.bind(this), 100);
      return this;
    };
  }

  /**
   * Performs test clean up by removing the offscreen `iframe`
   * @method elementTeardown
   * @private
   */
  function elementTeardown() {
//    document.body.removeChild(iframe);
  }

  /**
   * A function to register tests for an element:
   *
   *     (function() {
   *       'user strict';
   *       elementSuite('vca-colour-picker', function() {
   *         test('setting the web value should be reflected in the RGB values', function(done) {
   *           this.set(function(element) {
   *             element.web = '#FFCC88';
   *           }).then(function(element) {
   *             assert.equal(element.r, 255);
   *             assert.equal(element.g, 204);
   *             assert.equal(element.b, 136);
   *           });
   *         });
   *       });
   *     }());
   *
   * @param {String} name the name of the element that is to be tested
   * @param {Object} testsOrBoilerplate can be the name of a HTML file to load into the iframe that lives in the test
   * directory, or can be the test specs
   * @param {Function} [tests] the test specs if a boilerplate file is specified
   * @param {Function} done the function callback that creates the test cases
   * @method elementSuite
   */
  window.elementSuite = function(name, testsOrBoilerplate, tests) {
    var boilerplate = typeof testsOrBoilerplate === 'string' ?
          '/base/test/' + testsOrBoilerplate + '.html' :  '/bower_components/karma-polymer-test/iframe.html',
        tests = tests || testsOrBoilerplate;
    suite(name, function() {
      setup(elementSetup.bind(this, name, boilerplate));
      teardown(elementTeardown);
      tests();
    });
  };

  /**
   * A reference to the `chai` assertion library
   * @property assert
   * @type Object
   * @static
   */
  window.assert = chai.assert;

  // Mocha runs our tests
  mocha.setup({ui: 'tdd', slow: 1000, timeout: 5000});
}());
